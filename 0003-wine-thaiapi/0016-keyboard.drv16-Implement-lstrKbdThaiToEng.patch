From e5a6ebb2385dd927b6a18d53723dea0674ffd76b Mon Sep 17 00:00:00 2001
From: Khral Steelforge <garuda2550@gmail.com>
Date: Tue, 10 Apr 2018 22:17:47 +0700
Subject: [PATCH 16/26] keyboard.drv16: Implement lstrKbdThaiToEng.

Signed-off-by: Khral Steelforge <garuda2550@gmail.com>
---
 dlls/keyboard.drv16/thai.c | 94 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 93 insertions(+), 1 deletion(-)

diff --git a/dlls/keyboard.drv16/thai.c b/dlls/keyboard.drv16/thai.c
index b4bbf14a4da..d9ca8ecbb4f 100644
--- a/dlls/keyboard.drv16/thai.c
+++ b/dlls/keyboard.drv16/thai.c
@@ -55,10 +55,102 @@ INT16 WINAPI GetThaiKbdLayout16(void)
 
 /**********************************************************************
  *      lstrKbdThaiToEng (KEYBOARD.17)
+ *
+ * Converts Thai keyboard input to the same keystroke in English
+ * keyboard input.
+ *
+ * PARAMS
+ *    lpSrc   [I]  Thai null-terminated string that was typed while
+ *                 keyboard language was in Thai but the user think
+ *                 it was English
+ *    lpDest  [O]  Converted null-terminated string
+ *    nCount  [I]  Specifies number of characters in lpSrc to process
+ *    nThaiKbd[I]  Specifies Thai keyboard layout
+ *
+ * NOTE
+ *    This function doesn't affect any English character in lpSrc
+ *
  */
 VOID WINAPI lstrKbdThaiToEng16(SEGPTR lpSrc, SEGPTR lpDest, WORD nCount, INT16 nThaiKbd)
 {
-    FIXME("(%p, %p, %04x, %04x) stub\n", (void*)&lpSrc, (void*)&lpDest, nCount, nThaiKbd);
+    static const char kbdThaiToEng[2][256] =
+    {
+        /* 0 = Kedmanee */
+        {
+            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
+            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
+            0x20, 0x21, 0x57, 0x23, 0x24, 0x7E, 0x26, 0x27, 0x5A, 0x58, 0x2A, 0x21, 0x7D, 0x33, 0x22, 0x32,
+            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x4D,
+            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
+            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x60,
+            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
+            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
+            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+            0x20, 0x64, 0x2D, 0x5C, 0x38, 0x7C, 0x53, 0x27, 0x30, 0x43, 0x3D, 0x3A, 0x47, 0x50, 0x45, 0x44,
+            0x7B, 0x52, 0x3C, 0x49, 0x66, 0x39, 0x35, 0x6D, 0x54, 0x6F, 0x5B, 0x78, 0x7A, 0x2F, 0x72, 0x61,
+            0x34, 0x2C, 0x70, 0x69, 0x41, 0x5D, 0x3F, 0x3B, 0x4C, 0x4B, 0x6C, 0x73, 0x3E, 0x76, 0x56, 0x4F,
+            0x74, 0x79, 0x6B, 0x65, 0x62, 0x75, 0x37, 0x6E, 0x36, 0x5E, 0x42, 0x20, 0x20, 0x20, 0x20, 0x26,
+            0x67, 0x63, 0x46, 0x2E, 0x77, 0x31, 0x71, 0x48, 0x6A, 0x68, 0x55, 0x4A, 0x4E, 0x59, 0x20, 0x20,
+            0x51, 0x40, 0x23, 0x24, 0x25, 0x2A, 0x28, 0x29, 0x5F, 0x2B, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
+        },
+        /* 1 = Pattachote */
+        {
+            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
+            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
+            0x20, 0x21, 0x40, 0x23, 0x24, 0x2B, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x21, 0x24, 0x5F, 0x2A, 0x23,
+            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x31, 0x3E, 0x25,
+            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
+            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x60,
+            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
+            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
+            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+            0x20, 0x66, 0x27, 0x20, 0x6E, 0x20, 0x3A, 0x64, 0x2E, 0x3E, 0x4B, 0x49, 0x5D, 0x52, 0x5A, 0x58,
+            0x43, 0x22, 0x50, 0x46, 0x75, 0x77, 0x4F, 0x73, 0x53, 0x6B, 0x7A, 0x78, 0x4A, 0x55, 0x2F, 0x3C,
+            0x56, 0x69, 0x65, 0x74, 0x57, 0x63, 0x7D, 0x6F, 0x4E, 0x54, 0x6D, 0x76, 0x3F, 0x72, 0x4D, 0x7B,
+            0x2C, 0x67, 0x6A, 0x44, 0x62, 0x68, 0x59, 0x48, 0x5E, 0x36, 0x5C, 0x20, 0x20, 0x20, 0x20, 0x7E,
+            0x6C, 0x70, 0x4C, 0x5B, 0x3B, 0x20, 0x45, 0x71, 0x79, 0x61, 0x51, 0x41, 0x47, 0x7C, 0x20, 0x20,
+            0x30, 0x2D, 0x32, 0x33, 0x34, 0x35, 0x3D, 0x37, 0x38, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
+        }
+    };
+
+    int i = 0;
+    int kbd = KL_KESMANEE;
+    BOOL samePtr;
+    char temp;
+    char *src = MapSL(lpSrc);
+    char *dest = MapSL(lpDest);
+
+    TRACE("in \"%s\", %u\n", src, nCount);
+
+    /* Just in case some program use same pointer for source and destination */
+    if (src == dest)
+        samePtr = TRUE;
+    else
+        samePtr = FALSE;
+
+    if(nThaiKbd == KL_CURRENT)
+        kbd = THAI_KbdLayout;
+    else
+        kbd = nThaiKbd;
+
+    while ( (*src != '\0') && (i < nCount) )
+    {
+        temp = kbdThaiToEng[kbd][(unsigned int)*src];
+
+        if (samePtr)
+            *src = temp;
+        else
+            *dest = temp;
+
+        src++;
+        if (!samePtr)
+            dest++;
+
+        i++;
+    }
+    TRACE("out \"%s\"\n", dest);
 }
 
 /**********************************************************************
-- 
2.39.0

