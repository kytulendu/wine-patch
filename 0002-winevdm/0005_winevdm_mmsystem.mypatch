From 2238f09669726e49583b08897df60afc1640ec49 Mon Sep 17 00:00:00 2001
From: Khral Steelforge <garuda2550@gmail.com>
Date: Mon, 18 Feb 2019 23:11:30 +0700
Subject: mmsystem.dll16: Port the patch from winevdm.

from https://github.com/otya128/winevdm/tree/v0.7.0/mmsystem

Signed-off-by: Khral Steelforge <garuda2550@gmail.com>

diff --git a/dlls/mmsystem.dll16/mci16.c b/dlls/mmsystem.dll16/mci16.c
index d7a356d527b..98e072047a9 100644
--- a/dlls/mmsystem.dll16/mci16.c
+++ b/dlls/mmsystem.dll16/mci16.c
@@ -167,8 +167,8 @@ static MMSYSTEM_MapType	MCI_MapMsg16To32W(WORD wMsg, DWORD dwFlags, DWORD_PTR* l
     case MCI_STOP:
 	/* case MCI_UNDO: */
     case MCI_UPDATE:
-	*lParam = (DWORD)MapSL(*lParam);
-	return MMSYSTEM_MAP_OK;
+        *lParam = (DWORD)MapSL(*lParam);
+        return MMSYSTEM_MAP_OK;
     case MCI_WHERE:
     case MCI_FREEZE:
     case MCI_UNFREEZE:
@@ -293,7 +293,7 @@ static MMSYSTEM_MapType	MCI_MapMsg16To32W(WORD wMsg, DWORD dwFlags, DWORD_PTR* l
 		mop32w = (LPMCI_OPEN_PARMSW)((char*)mop32w + sizeof(LPMCI_OPEN_PARMS16));
 		mop32w->dwCallback       = mop16->dwCallback;
 		mop32w->wDeviceID        = mop16->wDeviceID;
-                if( ( dwFlags & ( MCI_OPEN_TYPE | MCI_OPEN_TYPE_ID)) == MCI_OPEN_TYPE)
+                if ( ( dwFlags & ( MCI_OPEN_TYPE | MCI_OPEN_TYPE_ID)) == MCI_OPEN_TYPE)
                     mop32w->lpstrDeviceType  = MCI_strdupAtoW(MapSL(mop16->lpstrDeviceType));
                 else
                     mop32w->lpstrDeviceType  = (LPWSTR) mop16->lpstrDeviceType;
@@ -314,7 +314,10 @@ static MMSYSTEM_MapType	MCI_MapMsg16To32W(WORD wMsg, DWORD dwFlags, DWORD_PTR* l
 		 * MCI_OPEN_DRIVER shall be done depending on uDevType.
 		 */
 		if (HIWORD(dwFlags))
-		    memcpy(mop32w + 1, mop16 + 1, sizeof(MCI_ANIM_OPEN_PARMS16) - sizeof(MCI_OPEN_PARMS16));
+		{
+			memcpy(mop32w + 1, mop16 + 1, sizeof(MCI_ANIM_OPEN_PARMS16) - sizeof(MCI_OPEN_PARMS16));
+			((MCI_ANIM_OPEN_PARMSW *)mop32w)->hWndParent = HWND_32(((MCI_ANIM_OPEN_PARMS16 *)mop16)->hWndParent);
+		}
 	    } else {
 		return MMSYSTEM_MAP_NOMEM;
 	    }
@@ -390,6 +393,34 @@ static MMSYSTEM_MapType	MCI_MapMsg16To32W(WORD wMsg, DWORD dwFlags, DWORD_PTR* l
 static  void	MCI_UnMapMsg16To32W(WORD wMsg, DWORD dwFlags, DWORD_PTR lParam, DWORD result)
 {
     switch (wMsg) {
+    case MCI_CLOSE:
+    case MCI_CLOSE_DRIVER:
+    case MCI_CONFIGURE:
+    case MCI_COPY:
+    case MCI_CUE:
+    case MCI_CUT:
+    case MCI_DELETE:
+    case MCI_GETDEVCAPS:
+    case MCI_LIST:
+    case MCI_PASTE:
+    case MCI_PAUSE:
+    case MCI_PLAY:
+    case MCI_REALIZE:
+    case MCI_RECORD:
+    case MCI_RESUME:
+    case MCI_SEEK:
+    case MCI_SET:
+    case MCI_SETAUDIO:
+    case MCI_SETVIDEO:
+    case MCI_SPIN:
+    case MCI_STEP:
+    case MCI_STOP:
+    case MCI_UPDATE:
+        if (lParam) {
+            LPMCI_GENERIC_PARMS mgp = (LPMCI_GENERIC_PARMS)lParam;
+            mgp->dwCallback = HWND_16(mgp->dwCallback);
+        }
+        break;
     case MCI_WHERE:
     case MCI_FREEZE:
     case MCI_UNFREEZE:
@@ -436,14 +467,15 @@ static  void	MCI_UnMapMsg16To32W(WORD wMsg, DWORD dwFlags, DWORD_PTR lParam, DWO
         if (lParam) {
             LPMCI_INFO_PARMSW	        mip32w = (LPMCI_INFO_PARMSW)lParam;
             char                       *base   = (char*)lParam - sizeof(LPMCI_INFO_PARMS16);
-	    LPMCI_INFO_PARMS16          mip16  = *(LPMCI_INFO_PARMS16*)base;
+            LPMCI_INFO_PARMS16          mip16  = *(LPMCI_INFO_PARMS16*)base;
+            int len = 0;
 
             if (result == MMSYSERR_NOERROR)
-                WideCharToMultiByte(CP_ACP, 0,
-                                    mip32w->lpstrReturn, mip32w->dwRetSize,
+                len = WideCharToMultiByte(CP_ACP, 0,
+                                    mip32w->lpstrReturn, mip32w->dwRetSize + 1,/* dwRetSize does not include null character */
                                     MapSL(mip16->lpstrReturn), mip16->dwRetSize,
                                     NULL, NULL);
-            mip16->dwRetSize = mip32w->dwRetSize; /* never update prior to NT? */
+            mip16->dwRetSize = len == 0 ? 0 : len - 1; /* never update prior to NT? */
             HeapFree(GetProcessHeap(), 0, mip32w->lpstrReturn);
             HeapFree(GetProcessHeap(), 0, base);
         }
@@ -679,6 +711,7 @@ DWORD WINAPI mciSendCommand16(UINT16 wDevID, UINT16 wMsg, DWORD dwParam1, DWORD
     DWORD		dwRet;
     BOOL                to32;
     DWORD_PTR           dwParam2 = p2;
+    DWORD count;
 
     TRACE("(%04X, %s, %08X, %08lX)\n", wDevID, MCI_MessageToString(wMsg), dwParam1, dwParam2);
 
@@ -712,7 +745,9 @@ DWORD WINAPI mciSendCommand16(UINT16 wDevID, UINT16 wMsg, DWORD dwParam1, DWORD
             break;
         case MMSYSTEM_MAP_OK:
         case MMSYSTEM_MAP_OKMEM:
+            ReleaseThunkLock(&count);
             dwRet = mciSendCommandW(wDevID, wMsg, dwParam1, dwParam2);
+            RestoreThunkLock(count);
             if (res == MMSYSTEM_MAP_OKMEM)
                 MCI_UnMapMsg16To32W(wMsg, dwParam1, dwParam2, dwRet);
             break;
@@ -809,5 +844,5 @@ BOOL16 WINAPI mciFreeCommandResource16(UINT16 uTable)
  */
 BOOL16 WINAPI mciExecute16(LPCSTR lpstrCommand)
 {
-    return mciExecute(lpstrCommand);
+    return mciSendStringA(lpstrCommand, NULL, 0, NULL);
 }
diff --git a/dlls/mmsystem.dll16/mmio16.c b/dlls/mmsystem.dll16/mmio16.c
index 366d4a573b6..08518d9bb9d 100644
--- a/dlls/mmsystem.dll16/mmio16.c
+++ b/dlls/mmsystem.dll16/mmio16.c
@@ -53,6 +53,7 @@ static struct mmio_thunk
     DWORD       callback;
     HMMIO       hMmio;          /* Handle to 32bit mmio object */
     SEGPTR      segbuffer;      /* actual segmented ptr to buffer */
+    HGLOBAL16   allocbuf;       /* MMIO_ALLOCBUF */
 } *MMIO_Thunks;
 
 #include <poppack.h>
@@ -126,7 +127,7 @@ static LRESULT	MMIO_UnMap32To16(DWORD wMsg, LPARAM lParam1, LPARAM lParam2,
  *
  *
  */
-static LRESULT MMIO_Callback3216(SEGPTR cb16, LPMMIOINFO lpmmioinfo, UINT uMessage,
+static LRESULT CALLBACK MMIO_Callback3216(SEGPTR cb16, LPMMIOINFO lpmmioinfo, UINT uMessage,
                                  LPARAM lParam1, LPARAM lParam2)
 {
     DWORD 		result;
@@ -189,6 +190,7 @@ static struct mmio_thunk*       MMIO_AddThunk(LPMMIOPROC16 pfn16, HPSTR segbuf)
             thunk->callback     = (char *)MMIO_Callback3216 - (char *)(&thunk->callback + 1);
             thunk->hMmio        = NULL;
             thunk->segbuffer    = 0;
+            thunk->allocbuf     = NULL;
         }
     }
     for (thunk = MMIO_Thunks; thunk < &MMIO_Thunks[MMIO_MAX_THUNKS]; thunk++)
@@ -227,7 +229,17 @@ static struct mmio_thunk*    MMIO_HasThunk(HMMIO hmmio)
  */
 static void     MMIO_SetSegmentedBuffer(struct mmio_thunk* thunk, SEGPTR ptr, BOOL release)
 {
-    if (release) UnMapLS(thunk->segbuffer);
+    if (release)
+    {
+        if (thunk->allocbuf)
+        {
+            GlobalFree16(thunk->allocbuf);
+        }
+        else
+        {
+            UnMapLS(thunk->segbuffer);
+        }
+    }
     thunk->segbuffer = ptr;
 }
 
@@ -264,7 +276,7 @@ HMMIO16 WINAPI mmioOpen16(LPSTR szFileName, MMIOINFO16* lpmmioinfo16,
 	mmioinfo.adwInfo[1]  = lpmmioinfo16->adwInfo[1];
 	mmioinfo.adwInfo[2]  = lpmmioinfo16->adwInfo[2];
 
-	ret = mmioOpenA(szFileName, &mmioinfo, dwOpenFlags);
+	ret = mmioOpenA(szFileName, &mmioinfo, dwOpenFlags & ~MMIO_ALLOCBUF);
         if (!ret || (dwOpenFlags & (MMIO_PARSE|MMIO_EXIST)))
         {
             thunk->pfn16 = NULL;
@@ -273,11 +285,13 @@ HMMIO16 WINAPI mmioOpen16(LPSTR szFileName, MMIOINFO16* lpmmioinfo16,
         else thunk->hMmio = ret;
         if (ret && (dwOpenFlags & MMIO_ALLOCBUF))
         {
-            MMIOINFO    m;
             if (lpmmioinfo16->pchBuffer) FIXME("ooch\n");
             /* FIXME: check whether mmioOpen should set pchBuffer */
-            mmioGetInfo(ret, &m, 0);
-            thunk->segbuffer = MapLS(m.pchBuffer);
+            HGLOBAL hg = GlobalAlloc16(0, lpmmioinfo16->cchBuffer);
+            mmioSetBuffer(ret, GlobalLock16(hg), lpmmioinfo16->cchBuffer, 0);
+            /* OFFSETOF(segbuffer) must be 0x0000 */
+            thunk->segbuffer = WOWGlobalLock16(hg);
+            thunk->allocbuf = hg;
         }
         LeaveCriticalSection(&mmio_cs);
 
@@ -362,6 +376,10 @@ MMRESULT16 WINAPI mmioGetInfo16(HMMIO16 hmmio, MMIOINFO16* lpmmioinfo, UINT16 uF
         return ret;
     }
 
+    if (thunk->allocbuf)
+    {
+        mmioinfo.dwFlags |= MMIO_ALLOCBUF;
+    }
     lpmmioinfo->dwFlags     = mmioinfo.dwFlags;
     lpmmioinfo->fccIOProc   = mmioinfo.fccIOProc;
     lpmmioinfo->pIOProc     = thunk->pfn16;
@@ -437,6 +455,7 @@ MMRESULT16 WINAPI mmioSetBuffer16(HMMIO16 hmmio, SEGPTR pchBuffer,
             FIXME("really ?\n");
             return MMSYSERR_INVALHANDLE;
         }
+        thunk->allocbuf = NULL;
         MMIO_SetSegmentedBuffer(thunk, pchBuffer, TRUE);
     }
     else
@@ -457,7 +476,7 @@ MMRESULT16 WINAPI mmioFlush16(HMMIO16 hmmio, UINT16 uFlags)
  */
 MMRESULT16 WINAPI mmioAdvance16(HMMIO16 hmmio, MMIOINFO16* lpmmioinfo, UINT16 uFlags)
 {
-    MMIOINFO    mmioinfo;
+    MMIOINFO    mmioinfo = { 0 };
     LRESULT     ret;
 
     /* WARNING: this heavily relies on mmioAdvance implementation (for choosing which
diff --git a/dlls/mmsystem.dll16/mmsystem.c b/dlls/mmsystem.dll16/mmsystem.c
index 083ec2d6da6..a7d178c2132 100644
--- a/dlls/mmsystem.dll16/mmsystem.c
+++ b/dlls/mmsystem.dll16/mmsystem.c
@@ -1230,6 +1230,13 @@ UINT16 WINAPI waveOutOpen16(HWAVEOUT16* lphWaveOut, UINT16 uDeviceID,
     {
         return MMSYSERR_NOMEM;
     }
+    if ((dwFlags & CALLBACK_TYPEMASK) == CALLBACK_WINDOW)
+    {
+        if (!IsWindow(HWND_32(dwCallback)))
+        {
+            return MMSYSERR_INVALPARAM;
+        }
+    }
     dwFlags = (dwFlags & ~CALLBACK_TYPEMASK) | CALLBACK_FUNCTION;
     /* since layout of WAVEFORMATEX is the same for 16/32 bits, we directly
      * call the 32 bit version
diff --git a/dlls/mmsystem.dll16/mmsystem.dll16.spec b/dlls/mmsystem.dll16/mmsystem.dll16.spec
index 66d1e9baa86..1dbd5c02daf 100644
--- a/dlls/mmsystem.dll16/mmsystem.dll16.spec
+++ b/dlls/mmsystem.dll16/mmsystem.dll16.spec
@@ -158,7 +158,7 @@
 1218   pascal  mmioFlush(word word) mmioFlush16
 1219   pascal  mmioAdvance(word ptr word) mmioAdvance16
 1220   pascal  mmioStringToFOURCC(str word) mmioStringToFOURCC16
-1221   pascal  mmioInstallIOProc(long ptr long) mmioInstallIOProc16
+1221   pascal  mmioInstallIOProc(long segptr long) mmioInstallIOProc16
 1222   pascal  mmioSendMessage(word word long long) mmioSendMessage16
 1223   pascal  mmioDescend(word ptr ptr word) mmioDescend16
 1224   pascal  mmioAscend(word ptr word) mmioAscend16
