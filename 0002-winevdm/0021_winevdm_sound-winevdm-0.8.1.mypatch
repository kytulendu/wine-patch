From 8b19a2897b455f1e0fac221ef3f5a3ce171cf7ab Mon Sep 17 00:00:00 2001
From: Khralkatorrix <garuda2550@gmail.com>
Date: Sat, 4 Feb 2023 16:27:25 +0700
Subject: [PATCH 22/23] sound.drv16: Update to winevdm-0.8.1.

---
 dlls/sound.drv16/sound.c | 166 +++++++++++++++++++++++----------------
 1 file changed, 100 insertions(+), 66 deletions(-)

diff --git a/dlls/sound.drv16/sound.c b/dlls/sound.drv16/sound.c
index c28c4d969b2..53d6dc82e3f 100644
--- a/dlls/sound.drv16/sound.c
+++ b/dlls/sound.drv16/sound.c
@@ -31,31 +31,39 @@
 WINE_DEFAULT_DEBUG_CHANNEL(sound);
 
 #define S_SERDVNA (-1)
-#define S_SERMACT (-4)
+#define S_SERMACT (-3)
 #define S_SERQFUL (-4)
 #define S_SERDNT  (-5)
+#define S_SERDLN  (-6)
 #define S_SERDTP  (-8)
+#define S_SERDMD (-10)
+#define S_SERDPT (-12)
 #define S_SERDFQ (-13)
 #define S_QUEUEEMPTY 0
+#define S_NORMAL     0
+#define S_LEGATO     1
+#define S_STACCATO   2
 
 typedef struct {
   UINT16 freq;
-  INT16 duration;
+  UINT16 duration;
+  UINT16 interstice;
 } NOTE;
 
 static NOTE *queue;
 static int queuelen;
-static HTASK16 owner = 0;
-static BOOL playing;
+static HTASK owner = 0;
+static volatile BOOL playing;
 static int nextnote;
 static HANDLE thread;
-static HWAVEOUT wohand;
+static LPHWAVEOUT wohand;
 static HANDLE event;
 static int pitch;
 static int tempo;
+static int mode;
 
 INT16 WINAPI StopSound16(void);
-INT16 WINAPI SetVoiceSound16(INT16 nVoice, DWORD lFrequency, INT16 nDuration);
+INT16 WINAPI WaitSoundState16(INT16 x);
 
 /***********************************************************************
  *		OpenSound (SOUND.1)
@@ -63,21 +71,23 @@ INT16 WINAPI SetVoiceSound16(INT16 nVoice, DWORD lFrequency, INT16 nDuration);
 INT16 WINAPI OpenSound16(void)
 {
     const WAVEFORMATEX wfmt = { WAVE_FORMAT_PCM, 1, 48000, 48000, 1, 8, 0 };
-
     if (owner) return S_SERDVNA;
 
-    owner = GetCurrentTask();
     event = CreateEventA(NULL, FALSE, FALSE, NULL);
 
-    if (waveOutOpen(&wohand, WAVE_MAPPER, &wfmt, (DWORD_PTR)event, 0, CALLBACK_EVENT) != MMSYSERR_NOERROR)
+    if (waveOutOpen(&wohand, WAVE_MAPPER, &wfmt, event, 0, CALLBACK_EVENT) != MMSYSERR_NOERROR)
+    {
+        CloseHandle(event);
         return S_SERDVNA;
-    waveOutSetVolume(wohand, MAKELONG(0x1999, 0x1999)); /* 10% volume */
+    }
+    owner = GetCurrentTask();
     queue = (NOTE *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 32 * sizeof(NOTE));
     queuelen = 32 * sizeof(NOTE);
     playing = 0;
     nextnote = 0;
     pitch = 0;
     tempo = 120;
+    mode = S_NORMAL;
     return 1;
 }
 
@@ -88,9 +98,13 @@ void WINAPI CloseSound16(void)
 {
     if (owner != GetCurrentTask()) return;
     StopSound16();
+    WaitSoundState16(S_QUEUEEMPTY);
     HeapFree(GetProcessHeap(), 0, (LPVOID)queue);
     waveOutClose(wohand);
     CloseHandle(event);
+    event = NULL;
+    wohand = NULL;
+    queue = NULL;
     playing = 0;
     owner = 0;
 }
@@ -117,21 +131,31 @@ INT16 WINAPI SetVoiceNote16(INT16 nVoice, INT16 nValue, INT16 nLength,
                             INT16 nCdots)
 {
     const int notes[] = { 4186, 4435, 4699, 4978, 5274, 5588, 5920, 6272, 6645, 7040, 7459, 7902 };
-    int freq;
-    int len;
-
-    if (--nValue > 83) return S_SERDNT;
-
-    TRACE("(%d, %d, %d, %d)\n", nVoice, nValue, nLength, nCdots);
+    float modelen = 0;
+    int freq = 0;
+    float len = (240000 * (2 - powf(.5f, nCdots))) / (nLength * tempo);
 
-    nValue = (nValue + pitch) % 84;
-    freq = notes[nValue % 12] >> (6 - (nValue / 12));
-    len = (nCdots ? ((nCdots * 3) / 2) : 1) * ((96000 / tempo) / nLength);
-    if (nCdots != 0 && len > 32767)
+    if (owner != GetCurrentTask()) return 0;
+    if (nVoice != 1) return 0;
+    if (playing) return 0;
+    if (nextnote >= (queuelen / sizeof(NOTE))) return S_SERQFUL;
+    if ((UINT16)nValue > 84) return S_SERDNT;
+    if (nLength <= 0) return S_SERDLN;
+    TRACE("(%d,%d,%d,%d)\n",nVoice,nValue,nLength,nCdots);
+    if (len >= 65536) return S_SERDLN;
+    if (nValue)
     {
-        len = (96000 / tempo) / nLength;
+        nValue = ((nValue + pitch) % 84) - 1;
+        freq = notes[nValue % 12] >> (6 - (nValue / 12));
+        modelen = (mode == S_STACCATO) ? .75f : (mode == S_LEGATO) ? 1 : .875f;
     }
-    return SetVoiceSound16(nVoice, freq << 16, len);
+
+    queue[nextnote].freq = freq;
+    queue[nextnote].duration = roundf(len * modelen);
+    queue[nextnote].interstice = len - queue[nextnote].duration;
+    nextnote++;
+    
+    return 0;
 }
 
 /***********************************************************************
@@ -143,11 +167,13 @@ INT16 WINAPI SetVoiceAccent16(INT16 nVoice, INT16 nTempo, INT16 nVolume,
     /* nVolume is ignored and some programs set it to 0 */
     if (owner != GetCurrentTask()) return 0;
     if (nVoice != 1) return 0;
-    TRACE("(%d, %d, %d, %d, %d):\n", nVoice, nTempo, nVolume, nMode, nPitch);
+    TRACE("(%d,%d,%d,%d,%d):\n", nVoice, nTempo, nVolume, nMode, nPitch);
     if ((nTempo < 32) || (nTempo > 255)) return S_SERDTP;
-    if (nPitch > 83) return -12;
+    if (nPitch > 83) return S_SERDPT;
+    if (nMode > 2) return S_SERDMD;
     tempo = nTempo;
     pitch = nPitch;
+    mode = nMode;
     return 0;
 }
 
@@ -175,69 +201,75 @@ INT16 WINAPI SetSoundNoise16(INT16 nSource, INT16 nDuration)
 INT16 WINAPI SetVoiceSound16(INT16 nVoice, DWORD lFrequency, INT16 nDuration)
 {
     int freq = HIWORD(lFrequency);
+    int len;
     if (owner != GetCurrentTask()) return 0;
     if (nVoice != 1) return 0;
     if (playing) return 0;
     if (nextnote >= (queuelen / sizeof(NOTE))) return S_SERQFUL;
-    if ((freq < 37) || (freq > 32767)) return S_SERDFQ;
+    
+    if (freq && ((freq < 37) || (freq > 32767))) return S_SERDFQ;
 
     TRACE("freq: %d duration: %d\n", freq, nDuration);
     queue[nextnote].freq = freq;
-    queue[nextnote].duration = ((nDuration + 1) / 2) * 5; // 2.5 ms per tick rounded up
+    len = ((nDuration + 1) / 2) * 5; // 2.5 ms per tick rounded up
+    queue[nextnote].duration = freq ? len : 0;
+    queue[nextnote].interstice = !freq ? len : 0;
     nextnote++;
     return 0;
 }
 
 static DWORD WINAPI play(LPVOID param)
  {
-    const float mspersamp = 1000.0f / 48000.0f;
     int len = 0;
+    const float mspersamp = 1000.0f / 48000.0f;
+    char *wavbuf = NULL;
     int k = 0;
-    int buflen;
-    char *wavbuf;
-    WAVEHDR whdr;
-
+    int interslen = 0;
+    int buflen = 0;
+    
     for (int i = 0; i < nextnote; i++)
-        len += (float)queue[i].duration / mspersamp;
-    if (!len) return 1;
-
+        len += (float)(queue[i].duration + queue[i].interstice) / mspersamp;
+    if (!len) return;
+    
     buflen = len;
-    wavbuf = (char *)HeapAlloc(GetProcessHeap(), 0, buflen);
+    *wavbuf = (char *)HeapAlloc(GetProcessHeap(), 0, buflen);
 
-    /* sound.drv that came with Windows 2-3 only supported the pc speaker
-     * make square waves to simulate it */
+    // sound.drv that came with Windows 2-3 only supported the pc speaker
+    // make square waves to simulate it
     for (int i = 0; i < nextnote; i++)
     {
         int notelen = (float)queue[i].duration / mspersamp;
-        int hwavelen = max(1, (int)((1000.0f / ((float)queue[i].freq * mspersamp)) / 2));
-        char samp = 0xff;
-        for (int j = 0; j < notelen; j++)
+        if (notelen)
         {
-            wavbuf[k + j] = samp;
-            if (!(j % hwavelen))
-                samp = ~samp;
+            int hwavelen = max(1, (int)((1000.0f / ((float)queue[i].freq * mspersamp)) / 2));
+            char samp = 0x99;
+            for (int j = 0; j < notelen; j++)
+            {
+                wavbuf[k + j] = samp;
+                if (!(j % hwavelen)) samp = ~samp;
+            }
         }
         k += notelen;
+        interslen = (float)queue[i].interstice / mspersamp;
+        if (interslen)
+        {
+            for (int j = 0; j < interslen; j++)
+                wavbuf[k + j] = 0x80;
+        }
+        k += interslen;
     }
 
-    whdr.lpData = wavbuf;
-    whdr.dwBufferLength = buflen;
-    whdr.dwBytesRecorded = 0;
-    whdr.dwUser = 0;
-    whdr.dwFlags = 0;
-    whdr.dwLoops = 0;
-    whdr.lpNext = NULL;
-
-    waveOutPrepareHeader(wohand, &whdr, sizeof(whdr));
-    waveOutWrite(wohand, &whdr, sizeof(whdr));
-
-    do
+    WAVEHDR whdr = { wavbuf, buflen, 0, 0, 0, 0, NULL, NULL };
+    if (waveOutPrepareHeader(wohand, &whdr, sizeof(whdr)) == MMSYSERR_NOERROR)
     {
-        WaitForSingleObject(event, INFINITE);
+        if (waveOutWrite(wohand, &whdr, sizeof(whdr)) == MMSYSERR_NOERROR)
+        {
+            do
+                WaitForSingleObject(event, INFINITE);
+            while (!(whdr.dwFlags & WHDR_DONE));
+        }
+        waveOutUnprepareHeader(wohand, &whdr, sizeof(whdr));
     }
-    while (!(whdr.dwFlags & WHDR_DONE));
-
-    waveOutUnprepareHeader(wohand, &whdr, sizeof(whdr));
     HeapFree(GetProcessHeap(), 0, wavbuf);
 
     nextnote = 0;
@@ -272,19 +304,21 @@ INT16 WINAPI StopSound16(void)
  */
 INT16 WINAPI WaitSoundState16(INT16 x)
 {
+    HANDLE dup;
     if (owner != GetCurrentTask()) return 0;
     if (!playing) return 0;
-    if (thread)
+    if (DuplicateHandle(GetCurrentProcess(), thread, GetCurrentProcess(), &dup, 0, FALSE, DUPLICATE_SAME_ACCESS))
     {
-        DWORD exitcode;
-        GetExitCodeThread(thread, &exitcode);
+        BOOL exitcode;
+        GetExitCodeThread(dup, &exitcode);
         if (exitcode == STILL_ACTIVE)
         {
             DWORD count;
             ReleaseThunkLock(&count);
-            WaitForSingleObject(thread, INFINITE);
+            WaitForSingleObject(dup, INFINITE);
             RestoreThunkLock(count);
         }
+        CloseHandle(dup);
     }
     return 0;
 }
@@ -301,10 +335,10 @@ INT16 WINAPI SyncAllVoices16(void)
 /***********************************************************************
  *		CountVoiceNotes (SOUND.13)
  */
-INT16 WINAPI CountVoiceNotes16(INT16 x)
+INT16 WINAPI CountVoiceNotes16(INT16 nVoice)
 {
-    FIXME("(%d): stub\n", x);
-    return 0;
+    if (nVoice != 1) return 0;
+    return nextnote;
 }
 
 /***********************************************************************
-- 
2.39.1

