From b5b8080744e7f10af16caa1b87d73d04e225a91d Mon Sep 17 00:00:00 2001
From: Khral Steelforge <garuda2550@gmail.com>
Date: Tue, 19 Feb 2019 00:55:20 +0700
Subject: sound.drv16: Port the patch from winevdm.

from https://github.com/otya128/winevdm/tree/v0.7.0/sound

Signed-off-by: Khral Steelforge <garuda2550@gmail.com>

diff --git a/dlls/sound.drv16/Makefile.in b/dlls/sound.drv16/Makefile.in
index 8e9b04bfa83..542063d9037 100644
--- a/dlls/sound.drv16/Makefile.in
+++ b/dlls/sound.drv16/Makefile.in
@@ -1,4 +1,5 @@
 MODULE    = sound.drv16
+IMPORTS   = winmm
 EXTRADLLFLAGS = -m16 -Wb,--main-module,winmm.dll
 
 C_SRCS = sound.c
diff --git a/dlls/sound.drv16/sound.c b/dlls/sound.drv16/sound.c
index 0f1386cf160..bc6faa5742b 100644
--- a/dlls/sound.drv16/sound.c
+++ b/dlls/sound.drv16/sound.c
@@ -20,20 +20,64 @@
 
 #include <stdarg.h>
 #include <stdlib.h>
+#include <math.h>
 #include "windef.h"
 #include "winbase.h"
+#include "wine/winbase16.h"
 #include "wine/windef16.h"
 #include "wine/debug.h"
+#include "mmsystem.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(sound);
 
+#define S_SERDVNA (-1)
+#define S_SERMACT (-4)
+#define S_SERQFUL (-4)
+#define S_SERDNT  (-5)
+#define S_SERDTP  (-8)
+#define S_SERDFQ (-13)
+#define S_QUEUEEMPTY 0
+
+typedef struct {
+  UINT16 freq;
+  INT16 duration;
+} NOTE;
+
+static NOTE *queue;
+static int queuelen;
+static HTASK16 owner = 0;
+static BOOL playing;
+static int nextnote;
+static HANDLE thread;
+static HWAVEOUT wohand;
+static HANDLE event;
+static int pitch;
+static int tempo;
+
+INT16 WINAPI StopSound16(void);
+
 /***********************************************************************
  *		OpenSound (SOUND.1)
  */
 INT16 WINAPI OpenSound16(void)
 {
-  FIXME("(void): stub\n");
-  return -1;
+    const WAVEFORMATEX wfmt = { WAVE_FORMAT_PCM, 1, 48000, 48000, 1, 8, 0 };
+
+    if (owner) return S_SERDVNA;
+
+    owner = GetCurrentTask();
+    event = CreateEventA(NULL, FALSE, FALSE, NULL);
+
+    if (waveOutOpen(&wohand, WAVE_MAPPER, &wfmt, (DWORD_PTR)event, 0, CALLBACK_EVENT) != MMSYSERR_NOERROR)
+        return S_SERDVNA;
+    waveOutSetVolume(wohand, MAKELONG(0x1999, 0x1999)); /* 10% volume */
+    queue = (NOTE *)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 32 * sizeof(NOTE));
+    queuelen = 32 * sizeof(NOTE);
+    playing = 0;
+    nextnote = 0;
+    pitch = 0;
+    tempo = 120;
+    return 1;
 }
 
 /***********************************************************************
@@ -41,7 +85,13 @@ INT16 WINAPI OpenSound16(void)
  */
 void WINAPI CloseSound16(void)
 {
-  FIXME("(void): stub\n");
+    if (owner != GetCurrentTask()) return;
+    StopSound16();
+    HeapFree(GetProcessHeap(), 0, (LPVOID)queue);
+    waveOutClose(wohand);
+    CloseHandle(event);
+    playing = 0;
+    owner = 0;
 }
 
 /***********************************************************************
@@ -49,18 +99,14 @@ void WINAPI CloseSound16(void)
  */
 INT16 WINAPI SetVoiceQueueSize16(INT16 nVoice, INT16 nBytes)
 {
-  FIXME("(%d,%d): stub\n",nVoice,nBytes);
-  return 0;
-}
-
-/***********************************************************************
- *		SetVoiceNote (SOUND.4)
- */
-INT16 WINAPI SetVoiceNote16(INT16 nVoice, INT16 nValue, INT16 nLength,
-                            INT16 nCdots)
-{
-  FIXME("(%d,%d,%d,%d): stub\n",nVoice,nValue,nLength,nCdots);
-  return 0;
+    if (owner != GetCurrentTask()) return 0;
+    if (nVoice != 1) return 0;
+    if (playing) return S_SERMACT;
+    HeapFree(GetProcessHeap(), 0, (LPVOID)queue);
+    queue = (NOTE *)HeapAlloc(GetProcessHeap(), 0, nBytes);
+    queuelen = nBytes;
+    nextnote = 0;
+    return 0;
 }
 
 /***********************************************************************
@@ -69,9 +115,15 @@ INT16 WINAPI SetVoiceNote16(INT16 nVoice, INT16 nValue, INT16 nLength,
 INT16 WINAPI SetVoiceAccent16(INT16 nVoice, INT16 nTempo, INT16 nVolume,
                               INT16 nMode, INT16 nPitch)
 {
-  FIXME("(%d,%d,%d,%d,%d): stub\n", nVoice, nTempo,
-	nVolume, nMode, nPitch);
-  return 0;
+    /* nVolume is ignored and some programs set it to 0 */
+    if (owner != GetCurrentTask()) return 0;
+    if (nVoice != 1) return 0;
+    TRACE("(%d, %d, %d, %d, %d):\n", nVoice, nTempo, nVolume, nMode, nPitch);
+    if ((nTempo < 32) || (nTempo > 255)) return S_SERDTP;
+    if (nPitch > 83) return -12;
+    tempo = nTempo;
+    pitch = nPitch;
+    return 0;
 }
 
 /***********************************************************************
@@ -79,8 +131,8 @@ INT16 WINAPI SetVoiceAccent16(INT16 nVoice, INT16 nTempo, INT16 nVolume,
  */
 INT16 WINAPI SetVoiceEnvelope16(INT16 nVoice, INT16 nShape, INT16 nRepeat)
 {
-  FIXME("(%d,%d,%d): stub\n",nVoice,nShape,nRepeat);
-  return 0;
+    FIXME("(%d,%d,%d): stub\n", nVoice, nShape, nRepeat);
+    return 0;
 }
 
 /***********************************************************************
@@ -88,8 +140,8 @@ INT16 WINAPI SetVoiceEnvelope16(INT16 nVoice, INT16 nShape, INT16 nRepeat)
  */
 INT16 WINAPI SetSoundNoise16(INT16 nSource, INT16 nDuration)
 {
-  FIXME("(%d,%d): stub\n",nSource,nDuration);
-  return 0;
+    FIXME("(%d, %d): stub\n", nSource, nDuration);
+    return 0;
 }
 
 /***********************************************************************
@@ -97,24 +149,111 @@ INT16 WINAPI SetSoundNoise16(INT16 nSource, INT16 nDuration)
  */
 INT16 WINAPI SetVoiceSound16(INT16 nVoice, DWORD lFrequency, INT16 nDuration)
 {
-  FIXME("(%d, %d, %d): stub\n",nVoice,lFrequency, nDuration);
-  return 0;
+    int freq = HIWORD(lFrequency);
+    if (owner != GetCurrentTask()) return 0;
+    if (nVoice != 1) return 0;
+    if (playing) return 0;
+    if (nextnote >= (queuelen / sizeof(NOTE))) return S_SERQFUL;
+    if ((freq < 37) || (freq > 32767)) return S_SERDFQ;
+
+    TRACE("freq: %d duration: %d\n", freq, nDuration);
+    queue[nextnote].freq = freq;
+    queue[nextnote].duration = ((nDuration + 1) / 2) * 5; // 2.5 ms per tick rounded up
+    nextnote++;
+    return 0;
 }
 
 /***********************************************************************
- *		StartSound (SOUND.9)
+ *		SetVoiceNote (SOUND.4)
  */
-INT16 WINAPI StartSound16(void)
+INT16 WINAPI SetVoiceNote16(INT16 nVoice, INT16 nValue, INT16 nLength,
+                            INT16 nCdots)
+{
+    const int notes[] = { 4186, 4435, 4699, 4978, 5274, 5588, 5920, 6272, 6645, 7040, 7459, 7902 };
+    int freq;
+    int len;
+
+    if (--nValue > 83) return S_SERDNT;
+
+    TRACE("(%d, %d, %d, %d)\n", nVoice, nValue, nLength, nCdots);
+
+    nValue = (nValue + pitch) % 84;
+    freq = notes[nValue % 12] >> (6 - (nValue / 12));
+    len = (nCdots ? ((nCdots * 3) / 2) : 1) * ((96000 / tempo) / nLength);
+    if (nCdots != 0 && len > 32767)
+    {
+        len = (96000 / tempo) / nLength;
+    }
+    return SetVoiceSound16(nVoice, freq << 16, len);
+}
+
+static DWORD WINAPI play(LPVOID param)
 {
-  return 0;
+    const float mspersamp = 1000.0f / 48000.0f;
+    int len = 0;
+    int k = 0;
+    int buflen;
+    char *wavbuf;
+    WAVEHDR whdr;
+
+    for (int i = 0; i < nextnote; i++)
+        len += (float)queue[i].duration / mspersamp;
+    if (!len) return;
+
+    buflen = len;
+    wavbuf = (char *)HeapAlloc(GetProcessHeap(), 0, buflen);
+
+    /* sound.drv that came with Windows 2-3 only supported the pc speaker
+     * make square waves to simulate it */
+    for (int i = 0; i < nextnote; i++)
+    {
+        int notelen = (float)queue[i].duration / mspersamp;
+        int hwavelen = max(1, (int)((1000.0f / ((float)queue[i].freq * mspersamp)) / 2));
+        char samp = 0xff;
+        for (int j = 0; j < notelen; j++)
+        {
+            wavbuf[k + j] = samp;
+            if (!(j % hwavelen))
+                samp = ~samp;
+        }
+        k += notelen;
+    }
+
+    whdr.lpData = wavbuf;
+    whdr.dwBufferLength = buflen;
+    whdr.dwBytesRecorded = 0;
+    whdr.dwUser = 0;
+    whdr.dwFlags = 0;
+    whdr.dwLoops = 0;
+    whdr.lpNext = NULL;
+
+    waveOutPrepareHeader(wohand, &whdr, sizeof(whdr));
+    waveOutWrite(wohand, &whdr, sizeof(whdr));
+
+    do
+    {
+        WaitForSingleObject(event, INFINITE);
+    }
+    while (!(whdr.dwFlags & WHDR_DONE));
+
+    waveOutUnprepareHeader(wohand, &whdr, sizeof(whdr));
+    HeapFree(GetProcessHeap(), 0, wavbuf);
+
+    nextnote = 0;
+    playing = 0;
+    ExitThread(0);
 }
 
 /***********************************************************************
- *		StopSound (SOUND.10)
+ *		StartSound (SOUND.9)
  */
-INT16 WINAPI StopSound16(void)
+INT16 WINAPI StartSound16(void)
 {
-  return 0;
+    if (owner != GetCurrentTask()) return 0;
+    if (playing) return 0;
+    playing = 1;
+    thread = CreateThread(NULL, 0, play, 0, 0, NULL);
+    return 0;
 }
 
 /***********************************************************************
@@ -122,7 +261,31 @@ INT16 WINAPI StopSound16(void)
  */
 INT16 WINAPI WaitSoundState16(INT16 x)
 {
-    FIXME("(%d): stub\n", x);
+    if (owner != GetCurrentTask()) return 0;
+    if (!playing) return 0;
+    if (thread)
+    {
+        DWORD exitcode;
+        GetExitCodeThread(thread, &exitcode);
+        if (exitcode == STILL_ACTIVE)
+        {
+            DWORD count;
+            ReleaseThunkLock(&count);
+            WaitForSingleObject(thread, INFINITE);
+            RestoreThunkLock(count);
+        }
+    }
+    return 0;
+}
+
+/***********************************************************************
+ *		StopSound (SOUND.10)
+ */
+INT16 WINAPI StopSound16(void)
+{
+    if (owner != GetCurrentTask()) return 0;
+    if (!playing) return 0;
+    waveOutReset(wohand);
     return 0;
 }
 
