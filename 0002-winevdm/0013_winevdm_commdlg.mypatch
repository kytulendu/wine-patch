From 28d722577c4f540db150f03f425350a6463d468f Mon Sep 17 00:00:00 2001
From: Khral Steelforge <garuda2550@gmail.com>
Date: Wed, 14 Aug 2019 01:05:27 +0700
Subject: commdlg.dll16: Port the patch from winevdm.

 from https://github.com/otya128/winevdm/tree/v0.7.0/commdlg
 and https://github.com/otya128/winevdm/tree/v0.7.0/user

Signed-off-by: Khral Steelforge <garuda2550@gmail.com>

diff --git a/dlls/commdlg.dll16/Makefile.in b/dlls/commdlg.dll16/Makefile.in
index 69731147d07..e00f640cd4e 100644
--- a/dlls/commdlg.dll16/Makefile.in
+++ b/dlls/commdlg.dll16/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = commdlg.dll16
-IMPORTS   = comdlg32 user32 gdi32
+IMPORTS   = comdlg32 user32 gdi32 dbghelp
 EXTRADLLFLAGS = -m16 -Wb,--main-module,comdlg32.dll
 
 C_SRCS = \
diff --git a/dlls/commdlg.dll16/cdlg16.h b/dlls/commdlg.dll16/cdlg16.h
index bc11b930f67..1f166ed5ecf 100644
--- a/dlls/commdlg.dll16/cdlg16.h
+++ b/dlls/commdlg.dll16/cdlg16.h
@@ -144,7 +144,7 @@ BOOL16  WINAPI ChooseColor16(LPCHOOSECOLOR16 lpChCol);
 HWND16  WINAPI FindText16( SEGPTR find);
 BOOL16  WINAPI GetOpenFileName16(SEGPTR ofn);
 BOOL16  WINAPI GetSaveFileName16(SEGPTR ofn);
-BOOL16  WINAPI PrintDlg16( LPPRINTDLG16 print);
+BOOL16  WINAPI PrintDlg16( SEGPTR print);
 HWND16  WINAPI ReplaceText16( SEGPTR find);
 BOOL16  WINAPI ChooseFont16(LPCHOOSEFONT16);
 BOOL16 CALLBACK ColorDlgProc16( HWND16 hDlg16, UINT16 message, WPARAM16 wParam, LPARAM lParam );
@@ -157,6 +157,35 @@ short WINAPI GetFileTitle16(LPCSTR lpFile, LPSTR lpTitle, UINT16 cbBuf);
 BOOL16 CALLBACK PrintDlgProc16(HWND16 hDlg16, UINT16 uMsg, WPARAM16 wParam, LPARAM lParam);
 BOOL16 CALLBACK PrintSetupDlgProc16(HWND16 hWnd16, UINT16 wMsg, WPARAM16 wParam, LPARAM lParam);
 
+typedef struct
+{
+    BYTE pop_eax;   /* 58 */
+    BYTE push;      /* 68 */
+    DWORD this_;
+    BYTE push_eax;  /* 50 */
+    BYTE mov_eax;   /* B8 */
+    DWORD address;
+    BYTE jmp;       /* FF E0 */
+    BYTE eax;       /* E0 */
+    BOOL used;
+    SEGPTR segofn16;
+    SEGPTR func;
+    union
+    {
+        OPENFILENAME16 ofn16;
+        PRINTDLGA pd;
+    };
+} COMMDLGTHUNK;
+
+COMMDLGTHUNK *allocate_thunk(SEGPTR ofnseg, SEGPTR func);
+void delete_thunk(LPVOID func);
+
 #include "poppack.h"
 
+typedef struct
+{
+    HMENU16 hMenu16;
+    DLGPROC16 dlgProc;
+} dialog_data;
+
 #endif /* _WINE_DLL_CDLG16_H */
diff --git a/dlls/commdlg.dll16/commdlg.dll16.spec b/dlls/commdlg.dll16/commdlg.dll16.spec
index 1654e171c26..40ba5b81dd9 100644
--- a/dlls/commdlg.dll16/commdlg.dll16.spec
+++ b/dlls/commdlg.dll16/commdlg.dll16.spec
@@ -13,7 +13,7 @@
 16  pascal -ret16 FormatCharDlgProc(word word word long) FormatCharDlgProc16
 18  pascal -ret16 FontStyleEnumProc(ptr ptr word long)   FontStyleEnumProc16
 19  pascal -ret16 FontFamilyEnumProc(ptr ptr word long)  FontFamilyEnumProc16
-20  pascal -ret16 PrintDlg(ptr) PrintDlg16
+20  pascal -ret16 PrintDlg(segptr) PrintDlg16
 21  pascal   PrintDlgProc(word word word long) PrintDlgProc16
 22  pascal   PrintSetupDlgProc(word word word long) PrintSetupDlgProc16
 #23  pascal  EDITINTEGERONLY exported, shared data
diff --git a/dlls/commdlg.dll16/filedlg.c b/dlls/commdlg.dll16/filedlg.c
index 050cddb0dd5..a4bb2ff79b8 100644
--- a/dlls/commdlg.dll16/filedlg.c
+++ b/dlls/commdlg.dll16/filedlg.c
@@ -29,10 +29,87 @@
 #include "winternl.h"
 #include "commdlg.h"
 #include "cdlg16.h"
+#include "verrsrc.h"
+#include "dbghelp.h"
 #include "wine/debug.h"
 
+#include "resource.h"
+
 WINE_DEFAULT_DEBUG_CHANNEL(commdlg);
 
+#define MAX_THUNK 5
+
+COMMDLGTHUNK *thunk_array;
+UINT WMFILEOK;
+UINT WMHELPMSG;
+UINT WMFINDMSG;
+UINT WMCOLOROK;
+UINT WMSHAREVI;
+UINT WMWOWDirChange;
+
+/* from user.exe16 */
+DLGTEMPLATE* (WINAPI *dialog_template16_to_template32)(HINSTANCE16, SEGPTR, DWORD *, dialog_data *);
+LRESULT (WINAPI *DIALOG_CallDialogProc)(HWND, UINT, WPARAM, LPARAM, WNDPROC16);
+
+static UINT_PTR CALLBACK thunk_hook(COMMDLGTHUNK *thunk, HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)
+{
+    UINT_PTR result;
+    /* window message hook? */
+    if (msg == WM_INITDIALOG || msg == WMFILEOK || msg == WMHELPMSG || msg == WMFINDMSG || msg == WMCOLOROK || msg == WMSHAREVI)
+    {
+        lp = thunk->segofn16;
+    }
+    if (!DIALOG_CallDialogProc)
+        DIALOG_CallDialogProc = (void *)GetProcAddress( GetModuleHandleA("user.exe16"), "DIALOG_CallDialogProc" );
+    result = DIALOG_CallDialogProc(hwnd, msg, wp, lp, (WNDPROC16)thunk->func);
+    return result;
+}
+
+static void init_thunk()
+{
+    if (thunk_array)
+        return;
+    WMFILEOK = RegisterWindowMessageW(FILEOKSTRINGW);
+    WMHELPMSG = RegisterWindowMessageW(HELPMSGSTRINGW);
+    WMFINDMSG = RegisterWindowMessageW(FINDMSGSTRINGW);
+    WMCOLOROK = RegisterWindowMessageW(COLOROKSTRINGW);
+    WMSHAREVI = RegisterWindowMessageW(SHAREVISTRINGW);
+    /* undocumented */
+    WMWOWDirChange = RegisterWindowMessageW(L"WOWDirChange");
+    thunk_array = VirtualAlloc(NULL, MAX_THUNK * sizeof(COMMDLGTHUNK), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
+}
+
+void delete_thunk(LPVOID func)
+{
+    if (func && (SIZE_T)thunk_array <= (SIZE_T)func && (SIZE_T)func <= (SIZE_T)(thunk_array + MAX_THUNK))
+    {
+        ((COMMDLGTHUNK*)func)->used = FALSE;
+    }
+}
+
+COMMDLGTHUNK *allocate_thunk(SEGPTR ofnseg, SEGPTR func)
+{
+    init_thunk();
+    for (int i = 0; i < MAX_THUNK; i++)
+    {
+        if (!thunk_array[i].used)
+        {
+            thunk_array[i].pop_eax  = 0x58;
+            thunk_array[i].push     = 0x68;
+            thunk_array[i].this_    = (DWORD)(thunk_array + i);
+            thunk_array[i].push_eax = 0x50;
+            thunk_array[i].mov_eax  = 0xB8;
+            thunk_array[i].address  = (DWORD)thunk_hook;
+            thunk_array[i].jmp      = 0xFF;
+            thunk_array[i].eax      = 0xE0;
+            thunk_array[i].used     = TRUE;
+            thunk_array[i].func     = func;
+            thunk_array[i].segofn16 = ofnseg;
+            return thunk_array + i;
+        }
+    }
+    return NULL;
+}
 
 static inline WORD get_word( const char **ptr )
 {
@@ -554,6 +631,65 @@ BOOL16 CALLBACK FileSaveDlgProc16(HWND16 hWnd16, UINT16 wMsg, WPARAM16 wParam, L
     return FALSE;
 }
 
+DWORD get_ofn_flag(DWORD flag)
+{
+    return (flag | OFN_NOLONGNAMES) & ~OFN_ENABLETEMPLATE;
+}
+
+LPCSTR dynamic_resource(HINSTANCE16 hInstance, SEGPTR lpTemplateName)
+{
+    HGLOBAL16 hmem;
+    HRSRC16 hRsrc;
+    LPCVOID data;
+    PVOID BaseAddress;
+    IMAGE_RESOURCE_DIRECTORY *dir;
+    ULONG size;
+    PVOID root;
+    DWORD oldprotect;
+    IMAGE_RESOURCE_DIRECTORY_ENTRY *entry;
+    int min, max, pos;
+    HRSRC hRsrc32;
+    HGLOBAL hmem32;
+    MEMORY_BASIC_INFORMATION mbi;
+    LPVOID data32;
+    DWORD sized;
+    DLGTEMPLATE *tmp32;
+    DWORD _;
+
+    if (!(hRsrc = FindResource16(hInstance, MapSL(lpTemplateName), (LPCSTR)RT_DIALOG))) return 0;
+    if (!(hmem = LoadResource16(hInstance, hRsrc))) return 0;
+    if (!(data = LockResource16(hmem))) return 0;
+    BaseAddress = GetModuleHandleW(L"commdlg.dll16");
+    root = ImageDirectoryEntryToData(BaseAddress, TRUE, IMAGE_DIRECTORY_ENTRY_RESOURCE, &size);
+    VirtualQuery(root, &mbi, sizeof(mbi));
+    VirtualProtect(mbi.BaseAddress, mbi.RegionSize, PAGE_READWRITE, &oldprotect);
+    dir = root;
+
+    entry = (IMAGE_RESOURCE_DIRECTORY_ENTRY *)(dir + 1);
+    min = dir->NumberOfNamedEntries;
+    max = min + dir->NumberOfIdEntries - 1;
+    pos = min;
+    while (pos <= max)
+    {
+        if (entry[pos].Id == (WORD)RT_BITMAP)
+        {
+            entry[pos].Id = (WORD)RT_DIALOG;
+            break;
+        }
+        pos++;
+    }
+    if (!(hRsrc32 = FindResourceA(BaseAddress, (LPCSTR)IDB_BITMAP1, (LPCSTR)RT_DIALOG))) return 0;
+    if (!(hmem32 = LoadResource(BaseAddress, hRsrc32))) return 0;
+    if (!(data32 = LockResource(hmem32))) return 0;
+    if (!dialog_template16_to_template32)
+        dialog_template16_to_template32 = (void *)GetProcAddress( GetModuleHandleA("user.exe16"), "dialog_template16_to_template32" );
+    tmp32 = dialog_template16_to_template32(hInstance, MapLS(data32), &sized, NULL);
+    UnMapLS(data32);
+    memcpy(data32, tmp32, sized);
+    VirtualProtect(mbi.BaseAddress, mbi.RegionSize, oldprotect, &_);
+    return MAKEINTRESOURCEA(IDB_BITMAP1);
+}
+
 /***********************************************************************
  *           GetOpenFileName   (COMMDLG.1)
  *
@@ -572,9 +708,13 @@ BOOL16 WINAPI GetOpenFileName16( SEGPTR ofn ) /* [in/out] address of structure w
     LPDLGTEMPLATEA template = NULL;
     OPENFILENAMEA ofn32;
     BOOL ret;
+    DWORD count;
+    OPENFILENAME16 ofn16;
 
     if (!lpofn) return FALSE;
 
+    ofn16 = *lpofn;
+
     ofn32.lStructSize       = OPENFILENAME_SIZE_VERSION_400A;
     ofn32.hwndOwner         = HWND_32( lpofn->hwndOwner );
     ofn32.lpstrFilter       = MapSL( lpofn->lpstrFilter );
@@ -587,36 +727,51 @@ BOOL16 WINAPI GetOpenFileName16( SEGPTR ofn ) /* [in/out] address of structure w
     ofn32.nMaxFileTitle     = lpofn->nMaxFileTitle;
     ofn32.lpstrInitialDir   = MapSL( lpofn->lpstrInitialDir );
     ofn32.lpstrTitle        = MapSL( lpofn->lpstrTitle );
-    ofn32.Flags             = (lpofn->Flags & ~OFN_ENABLETEMPLATE) | OFN_ENABLEHOOK;
+    ofn32.Flags             = get_ofn_flag(lpofn->Flags | OFN_ENABLEHOOK);
     ofn32.nFileOffset       = lpofn->nFileOffset;
     ofn32.nFileExtension    = lpofn->nFileExtension;
     ofn32.lpstrDefExt       = MapSL( lpofn->lpstrDefExt );
     ofn32.lCustData         = lpofn->lCustData;
     ofn32.lpfnHook          = dummy_hook;  /* this is to force old 3.1 dialog style */
+    ofn32.lpTemplateName    = NULL;
+    ofn32.hInstance         = GetModuleHandleW(L"commdlg.dll16");
 
     if (lpofn->Flags & OFN_ENABLETEMPLATE)
     {
         HRSRC16 res = FindResource16( lpofn->hInstance, MapSL(lpofn->lpTemplateName), (LPCSTR)RT_DIALOG );
         HGLOBAL16 handle = LoadResource16( lpofn->hInstance, res );
         DWORD size = SizeofResource16( lpofn->hInstance, res );
-        void *ptr = LockResource16( handle );
+        SEGPTR ptr16 = WOWGlobalLock16(handle);
+        DWORD size2;
+
+        if (!dialog_template16_to_template32)
+            dialog_template16_to_template32 = (void *)GetProcAddress( GetModuleHandleA("user.exe16"), "dialog_template16_to_template32" );
+        ofn32.hInstance = (HINSTANCE)dialog_template16_to_template32(lpofn->hInstance, ptr16, &size2, NULL);
+        template = (LPDLGTEMPLATEA)ofn32.hInstance;
+        ofn32.Flags |= OFN_ENABLETEMPLATEHANDLE;
+        FreeResource16( handle );
+    }
 
-        if (ptr && (template = convert_dialog( ptr, size )))
+    if (lpofn->Flags & OFN_ENABLEHOOK)
+    {
+        ofn32.lpfnHook = (LPOFNHOOKPROC)allocate_thunk(ofn, (SEGPTR)lpofn->lpfnHook);
+        ((COMMDLGTHUNK*)ofn32.lpfnHook)->ofn16 = ofn16;
+        if (!ofn32.lpfnHook)
         {
-            ofn32.hInstance = (HINSTANCE)template;
-            ofn32.Flags |= OFN_ENABLETEMPLATEHANDLE;
+            ERR("could not allocate GetOpenFileName16 thunk\n");
+            ofn32.lpfnHook = dummy_hook;
         }
-        FreeResource16( handle );
     }
 
-    if (lpofn->Flags & OFN_ENABLEHOOK) ofn32.lpfnHook = alloc_hook( lpofn->lpfnHook );
-
+    ReleaseThunkLock(&count);
     if ((ret = GetOpenFileNameA( &ofn32 )))
     {
 	lpofn->nFilterIndex   = ofn32.nFilterIndex;
 	lpofn->nFileOffset    = ofn32.nFileOffset;
 	lpofn->nFileExtension = ofn32.nFileExtension;
     }
+    RestoreThunkLock(count);
+    delete_thunk(ofn32.lpfnHook);
     HeapFree( GetProcessHeap(), 0, template );
     return ret;
 }
@@ -639,9 +794,13 @@ BOOL16 WINAPI GetSaveFileName16( SEGPTR ofn ) /* [in/out] address of structure w
     LPDLGTEMPLATEA template = NULL;
     OPENFILENAMEA ofn32;
     BOOL ret;
+    DWORD count;
+    OPENFILENAME16 ofn16;
 
     if (!lpofn) return FALSE;
 
+    ofn16 = *lpofn;
+
     ofn32.lStructSize       = OPENFILENAME_SIZE_VERSION_400A;
     ofn32.hwndOwner         = HWND_32( lpofn->hwndOwner );
     ofn32.lpstrFilter       = MapSL( lpofn->lpstrFilter );
@@ -654,36 +813,50 @@ BOOL16 WINAPI GetSaveFileName16( SEGPTR ofn ) /* [in/out] address of structure w
     ofn32.nMaxFileTitle     = lpofn->nMaxFileTitle;
     ofn32.lpstrInitialDir   = MapSL( lpofn->lpstrInitialDir );
     ofn32.lpstrTitle        = MapSL( lpofn->lpstrTitle );
-    ofn32.Flags             = (lpofn->Flags & ~OFN_ENABLETEMPLATE) | OFN_ENABLEHOOK;
+    ofn32.Flags             = get_ofn_flag(lpofn->Flags | OFN_ENABLEHOOK);
     ofn32.nFileOffset       = lpofn->nFileOffset;
     ofn32.nFileExtension    = lpofn->nFileExtension;
     ofn32.lpstrDefExt       = MapSL( lpofn->lpstrDefExt );
     ofn32.lCustData         = lpofn->lCustData;
     ofn32.lpfnHook          = dummy_hook;  /* this is to force old 3.1 dialog style */
+    ofn32.lpTemplateName    = NULL;
+    ofn32.hInstance         = GetModuleHandleW(L"commdlg.dll16");
 
     if (lpofn->Flags & OFN_ENABLETEMPLATE)
     {
         HRSRC16 res = FindResource16( lpofn->hInstance, MapSL(lpofn->lpTemplateName), (LPCSTR)RT_DIALOG );
         HGLOBAL16 handle = LoadResource16( lpofn->hInstance, res );
         DWORD size = SizeofResource16( lpofn->hInstance, res );
-        void *ptr = LockResource16( handle );
+        SEGPTR ptr16 = WOWGlobalLock16(handle);
+        DWORD size2;
+
+        if (!dialog_template16_to_template32)
+            dialog_template16_to_template32 = (void *)GetProcAddress( GetModuleHandleA("user.exe16"), "dialog_template16_to_template32" );
+        ofn32.hInstance = (HINSTANCE)dialog_template16_to_template32(lpofn->hInstance, ptr16, &size2, NULL);
+        template = (LPDLGTEMPLATEA)ofn32.hInstance;
+        ofn32.Flags |= OFN_ENABLETEMPLATEHANDLE;
+        FreeResource16( handle );
+    }
 
-        if (ptr && (template = convert_dialog( ptr, size )))
+    if (lpofn->Flags & OFN_ENABLEHOOK)
+    {
+        ofn32.lpfnHook = (LPOFNHOOKPROC)allocate_thunk(ofn, (SEGPTR)lpofn->lpfnHook);
+        ((COMMDLGTHUNK*)ofn32.lpfnHook)->ofn16 = ofn16;
+        if (!ofn32.lpfnHook)
         {
-            ofn32.hInstance = (HINSTANCE)template;
-            ofn32.Flags |= OFN_ENABLETEMPLATEHANDLE;
+            ERR("could not allocate GetOpenFileName16 thunk\n");
+            ofn32.lpfnHook = dummy_hook;
         }
-        FreeResource16( handle );
     }
-
-    if (lpofn->Flags & OFN_ENABLEHOOK) ofn32.lpfnHook = alloc_hook( lpofn->lpfnHook );
-
+    ReleaseThunkLock(&count);
     if ((ret = GetSaveFileNameA( &ofn32 )))
     {
 	lpofn->nFilterIndex   = ofn32.nFilterIndex;
 	lpofn->nFileOffset    = ofn32.nFileOffset;
 	lpofn->nFileExtension = ofn32.nFileExtension;
     }
+    RestoreThunkLock(count);
+    delete_thunk(ofn32.lpfnHook);
     HeapFree( GetProcessHeap(), 0, template );
     return ret;
 }
diff --git a/dlls/commdlg.dll16/fontdlg.c b/dlls/commdlg.dll16/fontdlg.c
index b7c87fd7361..d11e052d2aa 100644
--- a/dlls/commdlg.dll16/fontdlg.c
+++ b/dlls/commdlg.dll16/fontdlg.c
@@ -69,11 +69,11 @@ BOOL16 WINAPI ChooseFont16(LPCHOOSEFONT16 lpChFont)
     if (!lpChFont) return FALSE;
     font16 = MapSL(lpChFont->lpLogFont);
 
-    cf32.lStructSize = sizeof(CHOOSEFONTW);
+    cf32.lStructSize = sizeof(CHOOSEFONTA);
     cf32.hwndOwner = HWND_32(lpChFont->hwndOwner);
     cf32.hDC = HDC_32(lpChFont->hDC);
     cf32.iPointSize = lpChFont->iPointSize;
-    cf32.Flags = lpChFont->Flags & ~(CF_ENABLETEMPLATEHANDLE | CF_ENABLETEMPLATE);
+    cf32.Flags = lpChFont->Flags & ~(CF_ENABLETEMPLATEHANDLE | CF_ENABLETEMPLATE | CF_ENABLEHOOK);
     cf32.rgbColors = lpChFont->rgbColors;
     cf32.lCustData = lpChFont->lCustData;
     cf32.lpfnHook = NULL;
diff --git a/dlls/commdlg.dll16/printdlg.c b/dlls/commdlg.dll16/printdlg.c
index ac4741ee4e9..ee9c0bb5834 100644
--- a/dlls/commdlg.dll16/printdlg.c
+++ b/dlls/commdlg.dll16/printdlg.c
@@ -80,6 +80,24 @@ static HGLOBAL global_handle_from_16( HGLOBAL16 handle )
     return ret;
 }
 
+/* from filedlg.c */
+extern DLGTEMPLATE* (WINAPI *dialog_template16_to_template32)(HINSTANCE16, SEGPTR, DWORD *, dialog_data *);
+
+LPDLGTEMPLATEA resource_to_dialog32(HINSTANCE16 hInst, LPCSTR name)
+{
+    HRSRC16 res = FindResource16(hInst, name, (LPCSTR)RT_DIALOG);
+    HGLOBAL16 handle = LoadResource16(hInst, res);
+    DWORD size = SizeofResource16(hInst, res);
+    SEGPTR ptr16 = WOWGlobalLock16(handle);
+    DWORD size2;
+    LPDLGTEMPLATEA r;
+
+    if (!dialog_template16_to_template32)
+            dialog_template16_to_template32 = (void *)GetProcAddress( GetModuleHandleA("user.exe16"), "dialog_template16_to_template32" );
+    r = dialog_template16_to_template32(hInst, ptr16, &size2, NULL);
+    FreeResource16(handle);
+    return r;
+}
 /**********************************************************************
  *
  *      16 bit commdlg
@@ -100,10 +118,14 @@ static HGLOBAL global_handle_from_16( HGLOBAL16 handle )
  *  * Customizing is *not* implemented.
  */
 
-BOOL16 WINAPI PrintDlg16( LPPRINTDLG16 lppd )
+BOOL16 WINAPI PrintDlg16( SEGPTR pd )
 {
+    LPPRINTDLG16 lppd = MapSL(pd);
     PRINTDLGA pd32;
     BOOL ret;
+    HINSTANCE16 hInst;
+    LPDLGTEMPLATEA template_setup = NULL;
+    LPDLGTEMPLATEA template_print = NULL;
 
     if (!lppd) return PrintDlgA(NULL); /* generate failure with CDERR_INITIALIZATION */
 
@@ -119,14 +141,37 @@ BOOL16 WINAPI PrintDlg16( LPPRINTDLG16 lppd )
     pd32.nMinPage    = lppd->nMinPage;
     pd32.nMaxPage    = lppd->nMaxPage;
     pd32.nCopies     = lppd->nCopies;
+    pd32.lpfnPrintHook = NULL;
+    pd32.lpfnSetupHook = NULL;
+    hInst = lppd->hInstance;
 
-    if (lppd->Flags & (PD_ENABLEPRINTTEMPLATE | PD_ENABLEPRINTTEMPLATEHANDLE |
-                       PD_ENABLESETUPTEMPLATE | PD_ENABLESETUPTEMPLATEHANDLE))
-        FIXME( "custom templates no longer supported, using default\n" );
+    if (lppd->Flags & PD_ENABLEPRINTTEMPLATE)
+    {
+        template_print = resource_to_dialog32(hInst, MapSL(lppd->lpPrintTemplateName));
+        pd32.hPrintTemplate = (HGLOBAL)template_print;
+        pd32.Flags |= PD_ENABLEPRINTTEMPLATEHANDLE;
+    }
+    if (lppd->Flags & PD_ENABLESETUPTEMPLATE)
+    {
+        template_setup = resource_to_dialog32(hInst, MapSL(lppd->lpSetupTemplateName));
+        pd32.hSetupTemplate = (HGLOBAL)template_setup;
+        pd32.Flags |= PD_ENABLESETUPTEMPLATEHANDLE;
+    }
+    if (lppd->Flags & (PD_ENABLEPRINTTEMPLATEHANDLE |
+                       PD_ENABLESETUPTEMPLATEHANDLE))
+        FIXME( "custom templates handle no longer supported, using default\n" );
     if (lppd->Flags & PD_ENABLEPRINTHOOK)
-        FIXME( "custom print hook %p no longer supported\n", lppd->lpfnPrintHook );
+    {
+        COMMDLGTHUNK *thunk = allocate_thunk(pd, (SEGPTR)lppd->lpfnPrintHook);
+        pd32.Flags |= PD_ENABLEPRINTHOOK;
+        pd32.lpfnPrintHook = (LPPRINTHOOKPROC)thunk;
+    }
     if (lppd->Flags & PD_ENABLESETUPHOOK)
-        FIXME( "custom setup hook %p no longer supported\n", lppd->lpfnSetupHook );
+    {
+        COMMDLGTHUNK *thunk = allocate_thunk(pd, (SEGPTR)lppd->lpfnSetupHook);
+        pd32.Flags |= PD_ENABLEPRINTHOOK;
+        pd32.lpfnSetupHook = (LPSETUPHOOKPROC)thunk;
+    }
 
     /* Generate failure with CDERR_STRUCTSIZE, when needed */
     if (lppd->lStructSize != sizeof(PRINTDLG16)) pd32.lStructSize--;
@@ -145,6 +190,10 @@ BOOL16 WINAPI PrintDlg16( LPPRINTDLG16 lppd )
     }
     GlobalFree( pd32.hDevNames );
     GlobalFree( pd32.hDevMode );
+    delete_thunk(pd32.lpfnPrintHook);
+    delete_thunk(pd32.lpfnSetupHook);
+    HeapFree(GetProcessHeap(), 0, template_setup);
+    HeapFree(GetProcessHeap(), 0, template_print);
     return ret;
 }
 
diff --git a/dlls/commdlg.dll16/resource.h b/dlls/commdlg.dll16/resource.h
new file mode 100644
index 00000000000..a6817b76f95
--- /dev/null
+++ b/dlls/commdlg.dll16/resource.h
@@ -0,0 +1,2 @@
+
+#define IDB_BITMAP1                     101
diff --git a/dlls/user.exe16/dialog.c b/dlls/user.exe16/dialog.c
index 10416384562..87706d66747 100644
--- a/dlls/user.exe16/dialog.c
+++ b/dlls/user.exe16/dialog.c
@@ -24,11 +24,18 @@
 #include "winbase.h"
 #include "wownt32.h"
 #include "wine/winuser16.h"
+#include "winuser.h"
 #include "user_private.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(dialog);
 
+typedef struct
+{
+    HMENU16 hMenu16;
+    DLGPROC16 dlgProc;
+} dialog_data;
+
 /* Dialog control information */
 typedef struct
 {
@@ -221,7 +228,6 @@ static BOOL DIALOG_CreateControls16( HWND hwnd, LPCSTR template,
     return TRUE;
 }
 
-
 /***********************************************************************
  *           DIALOG_ParseTemplate16
  *
@@ -292,6 +298,253 @@ static LPCSTR DIALOG_ParseTemplate16( LPCSTR p, DLG_TEMPLATE * result )
     return p;
 }
 
+LRESULT call_window_proc16(HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPARAM lParam,
+    LRESULT *result, void *arg);
+LRESULT call_dialog_proc16(HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPARAM lParam,
+    LRESULT *result, void *arg)
+{
+    LRESULT r;
+    SetWindowLong16(hwnd, DWLP_MSGRESULT, 0xdeadbeef);
+    call_window_proc16(hwnd, msg, wParam, lParam, result, arg);
+    *result &= 0xffff;
+    r = *result;/* result: 16-bit */
+    if (GetWindowLong16(hwnd, DWLP_MSGRESULT) == 0xdeadbeef)
+    {
+        return r;
+    }
+    else
+    {
+        *result = GetWindowLong16(hwnd, DWLP_MSGRESULT);
+    }
+    return r;
+}
+
+/* internal API for COMMDLG hooks */
+LRESULT WINAPI DIALOG_CallDialogProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam, WNDPROC16 proc)
+{
+    LRESULT ret;
+    BOOL16 result = WINPROC_CallProc32ATo16(call_dialog_proc16, hwnd, msg, wParam, lParam,
+        &ret, proc);
+    if (GetWindowLong16(HWND_16(hwnd), DWLP_MSGRESULT) != 0xdeadbeef)
+        SetWindowLongA(hwnd, DWLP_MSGRESULT, ret);
+    return result;
+}
+
+void paddingDWORD(DWORD **d)
+{
+    *d = (BYTE*)(((DWORD)*d + 3) & ~((DWORD)3));
+}
+
+void copy_widestr(LPCSTR name, LPWSTR *templatew)
+{
+    int len = 0;
+    if (strlen(name))
+    {
+        len = MultiByteToWideChar(CP_ACP, NULL, name, -1, *templatew, strlen(name) * 4) * 2;
+    }
+    if (len)
+    {
+        *templatew = (WORD*)((BYTE*)*templatew + len);
+    }
+    else
+    {
+        **templatew = 0;
+        (*templatew)++;
+    }
+}
+
+/***********************************************************************
+*           DIALOG_CreateControls16Ex
+*
+* Create the control windows for a dialog.
+*/
+static BOOL DIALOG_CreateControls16Ex(HWND hwnd, LPCSTR template,
+    const DLG_TEMPLATE *dlgTemplate, HINSTANCE16 hInst, DLGITEMTEMPLATE *dlgItemTemplate32, SEGPTR base16, SIZE_T base32)
+{
+    DLG_CONTROL_INFO info;
+    INT items = dlgTemplate->nbItems;
+    WORD *dlgItemTemplatew;
+    dlgItemTemplate32 = (BYTE*) (((DWORD)dlgItemTemplate32 + 3) & ~((DWORD)3));
+    TRACE(" BEGIN\n");
+    while (items--)
+    {
+        paddingDWORD(&dlgItemTemplate32);
+        template = DIALOG_GetControl16(template, &info);
+        dlgItemTemplate32->style = info.style | WS_CHILD;
+        dlgItemTemplate32->dwExtendedStyle = 0;/* WS_EX_NOPARENTNOTIFY;*/
+        dlgItemTemplate32->x = info.x;
+        dlgItemTemplate32->y = info.y;
+        dlgItemTemplate32->cx = info.cx;
+        dlgItemTemplate32->cy = info.cy;
+        dlgItemTemplate32->id = info.id;
+        dlgItemTemplatew = (WORD*)(dlgItemTemplate32 + 1);
+        info.className = win32classname(hInst, info.className);
+        copy_widestr(info.className, &dlgItemTemplatew);
+        if (!HIWORD(info.windowName))
+        {
+            char buffer[512];
+            if (((dlgItemTemplate32->style & 0xF) == SS_ICON || (dlgItemTemplate32->style & 0xF) == SS_BITMAP) && stricmp(info.className, "STATIC") == 0)
+            {
+                sprintf(buffer, "#%d", (int)info.windowName);
+                copy_widestr(buffer, &dlgItemTemplatew);
+            }
+            else
+            {
+                if (LoadString16(hInst, LOWORD(info.windowName), buffer, sizeof(buffer)))
+                    info.windowName = buffer;
+                else
+                    info.windowName = "dialog error: invalid window name";
+                copy_widestr(info.windowName, &dlgItemTemplatew);
+            }
+        }
+        else
+        {
+            copy_widestr(info.windowName, &dlgItemTemplatew);
+        }
+        if (info.data)
+        {
+            *dlgItemTemplatew++ = sizeof(WORD) + sizeof(info.data);
+            /* reference to 16-bit dialog template */
+            *((LPCVOID*)dlgItemTemplatew) = MAKESEGPTR(SELECTOROF(base16), OFFSETOF(base16) + (WORD)((SIZE_T)info.data - base32));
+                dlgItemTemplatew += 2;
+        }
+        else
+        {
+            *dlgItemTemplatew++ = 0;
+        }
+        dlgItemTemplate32 = dlgItemTemplatew;
+    }
+    TRACE(" END\n");
+    return TRUE;
+}
+
+/* internal API for COMMDLG hooks */
+DLGTEMPLATE *WINAPI dialog_template16_to_template32(HINSTANCE16 hInst, SEGPTR dlgTemplate16, DWORD *size, dialog_data *paramd)
+{
+    HINSTANCE hInst32 = HINSTANCE_32(hInst);
+    DLGTEMPLATE *template32;
+    DLG_TEMPLATE template;
+    DWORD units = GetDialogBaseUnits();
+    HMENU16 hMenu = 0;
+    HFONT hUserFont = 0;
+    UINT xBaseUnit = LOWORD(units);
+    UINT yBaseUnit = HIWORD(units);
+    LPCVOID dlgTemplate = MapSL(dlgTemplate16);
+    LPCVOID base32 = dlgTemplate;
+    WORD *templatew;
+    int len;
+    HDC dc;
+    int pixels;
+    SIZE charSize;
+    HFONT hOldFont;
+    WNDCLASSEXA wc2 = { 0 };
+
+    /* Parse dialog template */
+
+    dlgTemplate = DIALOG_ParseTemplate16(dlgTemplate, &template);
+
+    /* Load menu */
+
+    if (template.menuName) hMenu = LoadMenu16(hInst, template.menuName);
+    /* FIXME: memory */
+    template32 = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 1024 + template.nbItems * 512);
+    template32->style = template.style;
+    template32->dwExtendedStyle = 0;
+    template32->cdit = template.nbItems;
+    template32->x = template.x;
+    template32->y = template.y;
+    template32->cx = template.cx;
+    template32->cy = template.cy;
+    templatew = (WORD*)(template32 + 1);
+    /* Menu */
+    *templatew++ = 0;
+    if (template.className == DIALOG_CLASS_ATOM)
+    {
+        *templatew++ = 0;
+    }
+    else
+    {
+        /* WNDclass */
+        template.className = win32classname(hInst, template.className);
+        len = MultiByteToWideChar(CP_ACP, NULL, template.className, -1, (LPWSTR)templatew, (1 + strlen(template.className)) * 4) * 2;
+        if (len)
+        {
+            templatew = (WORD*)((BYTE*)templatew + len);
+        }
+        else
+        {
+            *templatew++ = 0;
+        }
+    }
+    /* dialog title */
+    len = MultiByteToWideChar(CP_ACP, NULL, template.caption, -1, (LPWSTR)templatew, (1 + strlen(template.caption)) * 4) * 2;
+    if (len)
+    {
+        templatew = (WORD*)((BYTE*)templatew + len);
+    }
+    else
+    {
+        *templatew++ = 0;
+    }
+    if (template.style & DS_SETFONT)
+    {
+        *templatew++ = template.pointSize;
+        len = MultiByteToWideChar(CP_ACP, NULL, template.faceName, -1, (LPWSTR)templatew, (1 + strlen(template.faceName)) * 4) * 2;
+        if (len)
+        {
+            templatew = (WORD*)((BYTE*)templatew + len);
+        }
+        else
+        {
+            *templatew++ = 0;
+        }
+          /* We convert the size to pixels and then make it -ve.  This works
+           * for both +ve and -ve template.pointSize */
+        dc = GetDC(0);
+        pixels = MulDiv(template.pointSize, GetDeviceCaps(dc , LOGPIXELSY), 72);
+        hUserFont = CreateFontA( -pixels, 0, 0, 0, FW_DONTCARE,
+                                 FALSE, FALSE, FALSE, DEFAULT_CHARSET, 0, 0,
+                                 PROOF_QUALITY, FF_DONTCARE, template.faceName );
+        if (hUserFont)
+        {
+            hOldFont = SelectObject( dc, hUserFont );
+            charSize.cx = GdiGetCharDimensions( dc, NULL, &charSize.cy );
+            if (charSize.cx)
+            {
+                xBaseUnit = charSize.cx;
+                yBaseUnit = charSize.cy;
+            }
+            SelectObject( dc, hOldFont );
+        }
+        ReleaseDC(0, dc);
+        DeleteObject( hUserFont );
+        TRACE("units = %d,%d\n", xBaseUnit, yBaseUnit );
+    }
+    DIALOG_CreateControls16Ex(NULL, dlgTemplate, &template, hInst, (DLGITEMTEMPLATE *)templatew, dlgTemplate16, (SIZE_T)base32);
+    GetClassInfoExA(hInst32, template.className, &wc2);
+    if (!wc2.lpszClassName)
+        GetClassInfoExA(GetModuleHandleW(NULL), template.className, &wc2);
+    if (!paramd)
+    {
+        if (hMenu || wc2.lpszMenuName)
+        {
+            FIXME("dialog menu is not supported.\n");
+        }
+    }
+    else
+    {
+        paramd->hMenu16 = hMenu;
+        if (!hMenu)
+            paramd->hMenu16 = LoadMenu16(hInst, wc2.lpszMenuName);
+    }
+    /* Add menu height */
+    /* Precision...? */
+    if (hMenu)
+    {
+        template32->cy += MulDiv(GetSystemMetrics(SM_CYMENU), 8, yBaseUnit);
+    }
+    return template32;
+}
 
 /***********************************************************************
  *           DIALOG_CreateIndirect16
diff --git a/dlls/user.exe16/message.c b/dlls/user.exe16/message.c
index fa9388ceaa1..f76178f8a77 100644
--- a/dlls/user.exe16/message.c
+++ b/dlls/user.exe16/message.c
@@ -216,7 +216,7 @@ WNDPROC16 WINPROC_GetProc16( WNDPROC proc, BOOL unicode )
 }
 
 /* call a 16-bit window procedure */
-static LRESULT call_window_proc16( HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPARAM lParam,
+/*static*/ LRESULT call_window_proc16( HWND16 hwnd, UINT16 msg, WPARAM16 wParam, LPARAM lParam,
                                    LRESULT *result, void *arg )
 {
     DPI_AWARENESS_CONTEXT awareness;
diff --git a/dlls/user.exe16/user.exe16.spec b/dlls/user.exe16/user.exe16.spec
index 578e64e7904..822d7c921b1 100644
--- a/dlls/user.exe16/user.exe16.spec
+++ b/dlls/user.exe16/user.exe16.spec
@@ -569,5 +569,7 @@
 # 32-bit exports of the 16-bit functions needed by other dlls
 #
 @ stdcall -arch=win32 CreateIcon16(long long long long long ptr ptr)
+@ stdcall -arch=win32 dialog_template16_to_template32(long long ptr ptr)
+@ stdcall -arch=win32 DIALOG_CallDialogProc(ptr long ptr ptr ptr)
 @ stdcall -arch=win32 LoadBitmap16(long str)
 @ stdcall -arch=win32 LoadString16(long long ptr long)
diff --git a/dlls/user.exe16/user_private.h b/dlls/user.exe16/user_private.h
index 336b89102d4..d3f92c017e4 100644
--- a/dlls/user.exe16/user_private.h
+++ b/dlls/user.exe16/user_private.h
@@ -126,4 +126,22 @@ extern HICON get_icon_32( HICON16 icon16 ) DECLSPEC_HIDDEN;
 extern DWORD USER16_AlertableWait DECLSPEC_HIDDEN;
 extern WORD USER_HeapSel DECLSPEC_HIDDEN;
 
+#include "wine/list.h"
+
+struct class_entry
+{
+    struct list entry;
+    ATOM        atom;
+    HINSTANCE16 inst;
+    DWORD wndproc16;
+
+    WNDCLASSEXA classInfo;
+    LPCSTR win32_classname;
+};
+struct class_entry *find_win16_class(HINSTANCE16 hInst16, LPCSTR name);
+struct class_entry *find_win32_class(LPCSTR name);
+LPCSTR win16classname(LPCSTR name);
+LPCSTR win32classname(HINSTANCE16 hInst16, LPCSTR name);
+#define LOCAL_CLASS_PREFIX "WIN16"
+
 #endif /* __WINE_USER_PRIVATE_H */
diff --git a/dlls/user.exe16/window.c b/dlls/user.exe16/window.c
index 1f53bdc9540..e371c99cf62 100644
--- a/dlls/user.exe16/window.c
+++ b/dlls/user.exe16/window.c
@@ -37,13 +37,6 @@ WINE_DEFAULT_DEBUG_CHANNEL(win);
 
 static HWND16 hwndSysModal;
 
-struct class_entry
-{
-    struct list entry;
-    ATOM        atom;
-    HINSTANCE16 inst;
-};
-
 static struct list class_list = LIST_INIT( class_list );
 
 struct wnd_enum_info
@@ -1625,6 +1618,77 @@ ATOM WINAPI RegisterClassEx16( const WNDCLASSEX16 *wc )
     return atom;
 }
 
+struct class_entry *find_win32_class(LPCSTR name)
+{
+    struct class_entry *clazz;
+    ATOM class_atom = LOWORD(name);
+    BOOL is_atom = IS_INTRESOURCE(name);
+    LIST_FOR_EACH_ENTRY(clazz, &class_list, struct class_entry, entry)
+    {
+        if (is_atom)
+        {
+            if (class_atom == clazz->atom)
+            {
+                return clazz;
+            }
+            continue;
+        }
+        if (!strcmpi(name, clazz->win32_classname))
+        {
+            return clazz;
+        }
+    }
+    return NULL;
+}
+
+struct class_entry *find_win16_class(HINSTANCE16 hInst16, LPCSTR name)
+{
+    struct class_entry *clazz;
+    ATOM class_atom = LOWORD(name);
+    BOOL is_atom = IS_INTRESOURCE(name);
+    hInst16 = GetExePtr(hInst16);
+    LIST_FOR_EACH_ENTRY(clazz, &class_list, struct class_entry, entry)
+    {
+        if ((clazz->inst == hInst16 || (clazz->classInfo.style & CS_GLOBALCLASS)))
+        {
+            if (is_atom)
+            {
+                if (class_atom == clazz->atom)
+                {
+                    return clazz;
+                }
+                continue;
+            }
+            if (!strcmpi(name, clazz->classInfo.lpszClassName))
+            {
+                return clazz;
+            }
+        }
+    }
+    return NULL;
+}
+
+LPCSTR win16classname(LPCSTR name)
+{
+    struct class_entry *entry = find_win32_class(name);
+    if (entry)
+        return entry->classInfo.lpszClassName;
+    if (HIWORD(name) && name[0] == '#')
+    {
+        ATOM atom = FindAtomA(name);
+        if (atom != 0)
+            return atom;
+    }
+    return name;
+}
+
+LPCSTR win32classname(HINSTANCE16 hInst16, LPCSTR name)
+{
+    struct class_entry *entry = find_win16_class(hInst16, name);
+    if (entry)
+        return entry->win32_classname;
+    return name;
+}
 
 /***********************************************************************
  *		GetClassInfoEx (USER.398)
